{"version":3,"sources":["threeagent/impl/threejs.cljs"],"mappings":"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","names":["threeagent.impl.threejs/mesh-phong-material","c","js/module$node_modules$three$build$three.MeshPhongMaterial","cljs.core/clj->js","threeagent.impl.threejs/euler","x","y","z","js/module$node_modules$three$build$three.Euler","p__41621","vec__41622","cljs.core.nth","threeagent.impl.threejs/set-position!","obj","p__41625","vec__41626","threeagent.impl.threejs/set-rotation!","p__41629","vec__41630","threeagent.impl.threejs/set-scale!","threeagent.impl.threejs/set-cast-shadow!","?true","threeagent.impl.threejs/set-receive-shadow!","threeagent.impl.threejs/add-child!","parent","child","threeagent.impl.threejs/remove-child!","threeagent.impl.threejs/remove-all-children!","iter__4652__auto__","s__41639","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__41641","cljs.core/chunk-buffer","i__41640","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41638","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","threeagent.impl.threejs/get-in","path","next","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns threeagent.impl.threejs\n  (:refer-clojure :exclude [get-in])\n  (:require [\"three\" :as three]))\n\n\n(defn mesh-phong-material [c]\n  (new three/MeshPhongMaterial (clj->js c)))\n\n(defn euler [x y z]\n  (new three/Euler x y z \"XYZ\"))\n\n(defn set-position! [^js obj [x y z]]\n  (.set (.-position obj) x y z)\n  obj)\n\n(defn set-rotation! [^js obj [x y z]]\n  (.setRotationFromEuler obj (euler x y z))\n  obj)\n\n(defn set-scale! [^js obj [x y z]]\n  (.set (.-scale obj) x y z)\n  obj)\n  \n(defn set-cast-shadow! [^js obj ?true]\n  (set! (.-castShadow obj) ?true)\n  obj)\n  \n(defn set-receive-shadow! [^js obj ?true]\n  (set! (.-receiveShadow obj) ?true)\n  obj)\n  \n(defn add-child! [^js parent ^js child] (.add parent child))\n\n(defn remove-child! [^js parent ^js child] (.remove parent child))\n\n(defn remove-all-children! [^js parent]\n  (for [c (.-children parent)]\n    (remove-child! parent c))\n  parent)\n\n(defn get-in [^three/Object3D parent path]\n  (if (seq path)\n    (let [next (first path)]\n      (if (string? next)\n        (recur (.getObjectByName parent next) (rest path))\n        (if (= :.. next)\n          (recur (.-parent parent) (rest path))\n          (recur (aget (.-children parent) next) (rest path)))))\n    parent))\n"]}